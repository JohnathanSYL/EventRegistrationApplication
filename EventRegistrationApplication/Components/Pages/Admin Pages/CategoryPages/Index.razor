@page "/categories"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using EventRegistrationApplication.Domain
@using EventRegistrationApplication.Data
@implements IAsyncDisposable
@inject IDbContextFactory<EventRegistrationApplication.Data.EventRegistrationApplicationContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Categories</PageTitle>

<h1 class="mb-4">Categories</h1>

<div class="d-flex justify-content-between align-items-center mb-3">
    <p class="lead">Manage your categories below:</p>
    <a href="categories/create" class="btn btn-success">Create New Category</a>
</div>

<QuickGrid Class="table table-striped table-hover table-bordered" Items="context.Category" Pagination="paginationState">
    <PropertyColumn Property="category => category.CategoryName" Title="Category Name" Sortable="true" />
    <PropertyColumn Property="category => category.DateCreated" Title="Date Created" Sortable="true" />
    <PropertyColumn Property="category => category.DateUpdated" Title="Last Updated" Sortable="true" />
    <PropertyColumn Property="category => category.CreatedBy" Title="Created By" Sortable="true" />
    <PropertyColumn Property="category => category.UpdatedBy" Title="Updated By" Sortable="true" />

    <TemplateColumn Context="category">
        <div class="d-flex justify-content-around">
            <a href="@($"categories/edit?categoryid={category.CategoryId}")" class="btn btn-warning btn-sm me-2">Edit</a>
            <a href="@($"categories/details?categoryid={category.CategoryId}")" class="btn btn-info btn-sm me-2">Details</a>
            <a href="@($"categories/delete?categoryid={category.CategoryId}")" class="btn btn-danger btn-sm">Delete</a>
        </div>
    </TemplateColumn>
</QuickGrid>

<Paginator State="paginationState" />

@code {
    PaginationState paginationState = new PaginationState { ItemsPerPage = 20 };

    private EventRegistrationApplicationContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
