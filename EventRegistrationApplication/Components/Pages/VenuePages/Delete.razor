@page "/venues/delete"
@using Microsoft.EntityFrameworkCore
@using EventRegistrationApplication.Domain
@inject IDbContextFactory<EventRegistrationApplication.Data.EventRegistrationApplicationContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Venue</h2>
    <hr />
    @if (venue is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">VenueName</dt>
            <dd class="col-sm-10">@venue.VenueName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@venue.Location</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Capacity</dt>
            <dd class="col-sm-10">@venue.Capacity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@venue.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@venue.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@venue.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@venue.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="venue" OnValidSubmit="DeleteVenue" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(venue is null)">Delete</button> |
            <a href="/venues">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Venue? venue;

    [SupplyParameterFromQuery]
    private int VenueId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        venue = await context.Venue.FirstOrDefaultAsync(m => m.VenueId == VenueId);

        if (venue is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteVenue()
    {
        using var context = DbFactory.CreateDbContext();
        context.Venue.Remove(venue!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/venues");
    }
}
